@X @~
~V7 56 2 -5
~D10
~H                    MUSS
~
~
~D10
~H            NMSL101
~D10
~MMANCHESTER UNIVERSITY  -  CONFIDENTIAL~
~
~
~V2 -16
                                                                      ISSUE 9~
~V2 0
~V9 -1
~P
~V9 1
~YMSL101
~S1~M~LMSL IMPLEMENTATION DESCRIPTION
~S1~M~LSection 10  Version 1
~S1~LSection 10.1 MUBL for Multi-Pass Compiler
~S1~L1. General Description
~BThis module contains procedures for the subset of MUTL
used by the MUSL compiler. These procedures are a subset of those contained in M
TL121 and output the MUBL encoding
of each MUTL call.~
~Y
~P
~V9 -1
~D15
~HFLOWCHARTS
~H              NMSL101
~V9 -1
~F
@TITLE MSL10(1,6)
@COL 1S-2R-3R-4F
@BOX 1.0
MUTL FOR MULTI-PASS COMPILER
@BOX 2.0
MUTL SPECS
MSL10.1
MSL10.1/1
@BOX 3.0
MUTL TO MUBL
OUTPUT PROCS
MSL10.2
MSL10.3
@BOX 4.0
END
@BOX 1.1
$LS OUT.BIN.B ($IN);
$LS SELECTOUTPUT($IN);
$IN MUTLSTR;
$LS IPOS ()/$IN32;
MODULE(TL.TYPE,TL.TYPE.COMP,TL.END.TYPE,TL.SEG,TL.LOAD,
TL.CODE.AREA,TL.DATA.AREA,TL.SPACE,TL.S.DECL,TL.V.DECL,TL.MAKE,
TL.SELECT.VAR,TL.SELECT.FIELD,TL.ASS,TL.ASS.VALUE,TL.ASS.END,
TL.C.LIT.16,TL.C.LIT.32 ,TL.C.LIT.64,TL.C.NULL,TL.C.LIT.S,
TL.C.LIT.128,TL.LIT,TL.PROC.SPEC,TL.PROC.PARAM,TL.PROC.RESULT,
TL.PROC,TL.PROC.KIND,TL.END.PROC,TL.BLOCK,TL.END.BLOCK,TL.ENTRY,
TL.LABEL.SPEC ,TL.LABEL,TL.PL,
TL.D.TYPE,TL.INSERT,TL.CHECK,TL.REG,TL.LINE,TL.PRINT,TL,TL.END,
TL.MODULE,TL.END.MODULE,TL.MODE);
@BOX 1.2
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include "..\..\MUSS\musl\support.h"

typedef unsigned char      uint8;
typedef short              int16;
typedef unsigned short     uint16;
typedef int                int32;
typedef unsigned int       uint32;
typedef long long          t_int64;
typedef unsigned int       uint32;
typedef unsigned long long t_uint64;

extern void OUTBINB(int);
extern FILE *MUTLSTR;
extern int32 IPOS(void);
@BOX 2.1
::PDP *CODE 1;
#MSL10.1
#MSL10.1/1
@BOX 2.2
//PDP *CODE 1;
#MSL10.1
#MSL10.1/1
@BOX 3.1
#MSL10.2
#MSL10.3
@BOX 3.2
#MSL10.2
#MSL10.3
@BOX 4.1
*END
@BOX 4.2
@END
@TITLE MSL10.1(1,9)
@COL 1S-2R-3R-4R-5R-6R-7R-8F
@BOX 1.0
MUTLSPECS FOR DECLARATIONS
@BOX 2.0
TYPE SECTION
@BOX 3.0
AREA SECTION
@BOX 4.0
DATA DECL SECTION
@BOX 5.0
LITERAL SECTION
@BOX 6.0
PROG STRUC SECTION
@BOX 7.0
LABEL SECTION
@BOX 8.0
END
@BOX 1.1
::PSPECS FOR MUTL
@BOX 1.2
//PSPECS FOR MUTL
@BOX 2.1
PSPEC TL.TYPE(ADDR[$LO8],$IN);
PSPEC TL.TYPE.COMP($IN,ADDR,ADDR[$LO8]);
PSPEC TL.END.TYPE($IN);
@BOX 2.2
void TLTYPE(VECTOR *,int);
void TLTYPECOMP(int,int,VECTOR *);
void TLENDTYPE(int);
@BOX 3.1
PSPEC TL.SEG($IN,ADDR,$LO32,ADDR,$IN);
PSPEC TL.LOAD($IN,$IN);
PSPEC TL.CODE.AREA($IN);
PSPEC TL.DATA.AREA($IN);
@BOX 3.2
void TLSEG(int32,int32,int32,int32,int32);
void TLLOAD(int,int);
void TLCODEAREA(int);
void TLDATAAREA(int);
@BOX 4.1
PSPEC TL.SPACE(ADDR);
PSPEC TL.S.DECL(ADDR[$LO8],$IN,ADDR);
PSPEC TL.V.DECL(ADDR[$LO8],$LO32,$IN,$IN,$IN,ADDR);
PSPEC TL.MAKE($IN,$IN,ADDR);
PSPEC TL.SELECT.VAR();
PSPEC TL.SELECT.FIELD($IN,$IN,$IN);
PSPEC TL.ASS($IN,$IN);
PSPEC TL.ASS.VALUE($IN,$IN);
PSPEC TL.ASS.END();
@BOX 4.2
void TLSPACE(int);
void TLSDECL(char *,int,int);
void TLVDECL(char *,uint32,int,int,int,int);
void TLMAKE(int,int,int);
void TLSELECTVAR(void);
void TLSELECTFIELD(int,int,int);
void TLASS(int,int);
void TLASSVALUE(int,int);
void TLASSEND(void);
@BOX 5.1
PSPEC TL.C.LIT.16($IN,$IN16);
PSPEC TL.C.LIT.32 ($IN,$IN32);
PSPEC TL.C.LIT.64($IN,$LO64);
PSPEC TL.C.NULL($IN);
PSPEC TL.C.LIT.S($IN,$AD [$LO8]);
PSPEC TL.C.LIT.128($IN,$RE128);
PSPEC TL.LIT(ADDR[$LO8],$IN);
@BOX 5.2
void TLCLIT16(int,int16);
void TLCLIT32 (int,int32);
void TLCLIT64(int,t_uint64);
void TLCNULL(int);
void TLCLITS(int,VECTOR *);
void TLCLIT128(int,double);
void TLLIT(char *,int);
@BOX 6.1
PSPEC TL.PROC.SPEC(ADDR[$LO8],$IN);
PSPEC TL.PROC.PARAM($IN,ADDR);
PSPEC TL.PROC.RESULT($IN);
PSPEC TL.PROC($IN);
PSPEC TL.PROC.KIND($IN);
PSPEC TL.END.PROC();
PSPEC TL.BLOCK();
PSPEC TL.END.BLOCK();
PSPEC TL.ENTRY($IN);
@BOX 6.2
void TLPROCSPEC(char *,int);
void TLPROCPARAM(int,int);
void TLPROCRESULT(int);
void TLPROC(int);
void TLPROCKIND(int);
void TLENDPROC(void);
void TLBLOCK(void);
void TLENDBLOCK(void);
void TLENTRY(int);
@BOX 7.1
PSPEC TL.LABEL.SPEC (ADDR[$LO8],$IN);
PSPEC TL.LABEL($IN);
@BOX 7.2
void TLLABELSPEC (char *,int);
void TLLABEL(int);
@END
@TITLE MSL10.1/1(1,6)
@COL 1S-2R-3R-4R-5F
@BOX 1.0
PSPECS FOR CODE PLANTING, INITIALISATION AND DIAGNOSTICS
@BOX 2.0
CODE PLANTING SECTION
@BOX 3.0
DIAGNOSTIC SECTION
@BOX 4.0
INITIALISATION SECTION
@BOX 5.0
END
@BOX 1.1
@BOX 1.2
@BOX 2.1
PSPEC TL.PL($IN,$IN);
PSPEC TL.D.TYPE($IN,$IN);
PSPEC TL.INSERT($IN);
PSPEC TL.CHECK($IN);
PSPEC TL.REG($IN);
@BOX 2.2
void TLPL(int,int);
void TLDTYPE(int,int);
void TLINSERT(int);
void TLCHECK(int);
void TLREG(int);
@BOX 3.1
PSPEC TL.LINE($IN32)/$IN;
PSPEC TL.PRINT($IN);
@BOX 3.2
void TLLINE(int32);
void TLPRINT(int);
@BOX 4.1
PSPEC TL($IN,ADDR[$LO8], $IN);
PSPEC TL.END();
PSPEC TL.MODULE();
PSPEC TL.END.MODULE($IN);
PSPEC TL.MODE($IN,$IN);
@BOX 4.2
void TL(int,char *, int);
void TLEND(void);
void TLMODULE(void);
void TLENDMODULE(int);
void TLMODE(int,int);
@END
@TITLE MSL10.2(1,6)
@COL 1S-2R-3R-4R-8R
@COL 7R-5R
@ROW 3-7
@BOX 1.0
BASIC OUTPUT PROCS
@BOX 2.0
OUTPUT 16-BIT NO.
@BOX 3.0
OUTPUT 64-BIT NO.
@BOX 4.0
OUTPUT MUBLV
@BOX 5.0
OUTPUT MUBLUV
@BOX 7.0
OUTPUT MUBLIV
@BOX 8.0
OUTPUT STRING
@BOX 1.1

PSPEC MUBLU16($LO);
PSPEC MUBLU64($LO64)
PSPEC MUBLV($LO32,$IN);
PSPEC MUBLUV($IN32);
PSPEC MUBLIV($IN32);
PSPEC MUBLS(ADDR[$LO8]);
PSPEC MUBLCODE($IN);
@BOX 1.2

void MUBLU16(uint16);
void MUBLU64(t_uint64);
void MUBLV(uint32,int);
void MUBLUV(int32);
void MUBLIV(int32);
void MUBLS(char *);
void MUBLCODE(int);
@BOX 2.1
PROC MUBLCODE(CODE);
SELECTOUTPUT(MUTL.STR);
OUT.BIN.B(CODE);
END
PROC MUBLU16(HEX);
   OUT.BIN.B(HEX ->>8 & %FF);
   OUT.BIN.B(HEX & %FF );

}
@BOX 2.2
void MUBLCODE(int CODE)
{
  SELECTOUTPUT(MUTLSTR);
  OUTBINB(CODE);
}
void MUBLU16(uint16 HEX)
{
   OUTBINB((HEX>>8) & 0xFF);
   OUTBINB(HEX & 0xFF );
}
@BOX 3.1
PROC MUBLU64(HEX);
   $IN T;
   MUBLU16(%FF80);
   HEX ->>48 & %FFFF => T;
   MUBLU16(T);
   HEX ->>32 & %FFFF => T;
   MUBLU16(T);
   HEX ->>16 & %FFFF => T;
   MUBLU16(T);
   HEX&%FFFF => T;
   MUBLU16(T);
END;
@BOX 3.2
void MUBLU64(t_uint64 HEX)
{
   uint16 T;
   MUBLU16(0xFF80);
   T = (HEX >>48) & 0xFFFF;
   MUBLU16(T);
   T = (HEX>>32) & 0xFFFF;
   MUBLU16(T);
   T = (HEX>>16) & 0xFFFF;
   MUBLU16(T);
   T = (HEX & 0xFFFF);
   MUBLU16(T);
}
@BOX 4.1
PROC MUBLV(N,I);
 ALTERNATIVE I FROM
   OUT.BIN.B(N);
   MUBLU16(N!%8000);
   BEGIN
    OUT.BIN.B(N->>16 ! %C0);
    MUBLU16(N & %FFFF)
   END;
   BEGIN
    MUBLU16(N ->>16 ! %E000);
    MUBLU16(N & %FFFF)
   END;
   BEGIN
    OUT.BIN.B(%F0);
    MUBLU16(N ->>16 );
    MUBLU16(N & %FFFF)
   END
  END;
END;
@BOX 4.2
void MUBLV(uint32 N,int I)
{
switch (I)
{
  case 0:
  {
      OUTBINB(N);
	  break;
  }
  case 1:
  {
      MUBLU16((uint16)N | 0x8000);
	  break;
  }
  case 2:
  {
      OUTBINB((N >> 16) | 0xC0);
      MUBLU16(N & 0xFFFF);
	  break;
  }
  case 3:
  {
      MUBLU16((N >> 16) | 0xE000);
      MUBLU16(N & 0xFFFF);
	  break;
  }
  case 4:
  {
      OUTBINB(0xF0);
      MUBLU16(N >> 16 );
      MUBLU16(N & 0xFFFF);
	  break;
  }
}
}
@BOX 5.1
PROC MUBLUV(N);
 $IN T;
   IF N & %F(6)80 = 0 THEN
     0 => T
   ELSE
   IF N & %F(4)C000 = 0 THEN
     1 => T
   ELSE
    IF N & %FFE0(5) = 0 THEN
      2 => T
    ELSE
     IF N & %F0(7) = 0 THEN
       3 => T
     ELSE
       4 => T
     FI
    FI
   FI
   FI;
   MUBLV(N,T);
END;
@BOX 5.2
void MUBLUV(int32 N)
{
    int T;
    if ((N & 0xFFFFFF80) == 0)
    {
        T = 0;
    }
    else
    {
        if ((N & 0xFFFFC000) == 0)
        {
            T = 1;
        }
        else
        {
            if ((N & 0xFFE00000) == 0)
            {
                T = 2;
            }
            else
            {
                if ((N & 0xF0000000) == 0)
                {
                    T = 3;
                }
                else
                {
                    T = 4;
                }
            }
        }
    }
   MUBLV(N,T);
}
@BOX 7.1
PROC MUBLIV(N);
$IN T;
$IN32 J;
IF N & %F(6)C0 => J = 0 OR J = %F(6)C0 THEN
   0 => T;
   N & %7F => N;
ELSE
 IF N & %F(4)E000 => J = 0 OR J = %F(4)E000 THEN
   1 => T;
   N & %3FFF => N;
 ELSE
  IF N & %F(3)0(5) => J = 0 OR J = %F(3)0(5) THEN
    2 => T;
    N & %1F(5) => N
  ELSE  IF N & %F80(6) => J = 0 OR J = %F80(6) THEN
     3 => T;
     N & %F(6) => N
    ELSE
      4 => T
    FI
  FI
FI

FI
MUBLV(N,T);
END;
@BOX 7.2
void MUBLIV(int32 N)
{
  int T;
  int32 J;
  if (( J =  N & 0xFFFFFC0) == 0 || (J == 0xFFFFFFC0))
  {
    T = 0;
    N =  N & 0x7F;
  }
  else
   {
     if ((J = N & 0xFFFFE000) == 0 || J == 0xFFFFE000)
     {
	   T = 1;
       N = N & 0x3FFF;
     }
     else
      {
        if ((J = N & 0xFFF00000) == 0 || J == 0xFFF00000)
        {
	      T = 2;
          N = N & 0x1FFFFF;
	    }
        else 
	    {
	      if ((J = N & 0xF8000000) == 0 || J == 0xF8000000)
          {
	        T = 3;
            N = N & 0xFFFFFF;
	      }
          else
          {
	        T = 4;
	      }
        }
      }
  }
  MUBLV(N,T);
}
@BOX 8.1
PROC MUBLS(STR);
$IN TEMP,I;
SIZE(STR) => TEMP;
   OUT.BIN.B(TEMP);
   -1 => I
   WHILE 1 +> I < TEMP DO
    OUT.BIN.B(STR^[I])
   OD

END;
@BOX 8.2
void MUBLS(char *STR)
{
int TEMP,I;
TEMP = (int)strlen(STR);
   OUTBINB(TEMP);
   I = -1;
   while (++I < TEMP)
   {
    OUTBINB(STR[I]);
   }
}
@END
@TITLE MSL10.3(1,6)
@COL 1S-2R-3R-4R-5R-6R-7R-11R-8R-9R-10F
@FLOW 1-2-3-4-5-6-7-11-8-9-10
@BOX 1.0
MUTL PROCEDURE GROUPING
@BOX 2.0
TYPE SECTION
MSL10.3.1
@BOX 3.0
AREA SECTION
MSL3.10.2
@BOX 4.0
DATA DECL SECTION
MSL10.3.3
@BOX 5.0
LITERAL SECTION
MSL10.3.4
@BOX 6.0
PROG STRUC SECTION
MSL10.3.5
@BOX 7.0
LABEL SECTION
MSL10.3.6
@BOX 8.0
DIAGNOSTICS SECTION
MSL10.3.8
@BOX 9.0
INITIALISATION
MSL10.3.9
@BOX 11.0
CODE PLANTING SECTION
MSL10.3.7
@BOX 10.0
END
@BOX1.1
@BOX1.2
@BOX 2.1
#MSL10.3.1
@BOX 2.2
#MSL10.3.1
@BOX 3.1
#MSL10.3.2
@BOX 3.2
#MSL10.3.2
@BOX 4.1
#MSL10.3.3
@BOX 4.2
#MSL10.3.3
@BOX 5.1
#MSL10.3.4
@BOX 5.2
#MSL10.3.4
@BOX 6.1
#MSL10.3.5
@BOX 6.2
#MSL10.3.5
@BOX 7.1
#MSL10.3.6
@BOX 7.2
#MSL10.3.6
@BOX 8.1
#MSL10.3.8
@BOX 8.2
#MSL10.3.8
@BOX 9.1
#MSL10.3.9
@BOX 9.2
#MSL10.3.9
@BOX 10.1
::END
@BOX 10.2
//END
@BOX 11.1
#MSL10.3.7
@BOX 11.2
#MSL10.3.7
@END
@TITLE MSL10.3.1(1,6)
@COL 1S
@BOX 1.0
TYPE SECTION
@BOX 1.1
PROC TL.TYPE(N,NAT);
     MUBLCODE(0); MUBLS(N) ; MUBLUV(NAT); ;
END;

PROC TL.TYPE.COMP(T,D,NM);
   MUBLCODE(1); MUBLUV(T); MUBLIV(D);MUBLS(NM); ;
END;

PROC TL.END.TYPE(STAT);
   MUBLCODE(2); OUT.BIN.B(STAT); ;
END;
@BOX 1.2
//void TLTYPE(char *N, int NAT)
//{
//     MUBLCODE(0); MUBLS(N) ; MUBLUV(NAT);
//}
//void TLTYPECOMP(int T, int D, char *NM)
//{
//   MUBLCODE(1); MUBLUV(T); MUBLIV(D);MUBLS(NM);
//}
//
//void TLENDTYPE(int STAT)
//{
//   MUBLCODE(2); OUTBINB(STAT); ;
//}
@END
@TITLE MSL10.3.2(1,6)
@COL 1S
@BOX 1.0
AREA SECTION
@BOX 1.1
PROC TL.SEG(N,S,RTA,CTA,NL);
$LO32 I;RTA <<- 16 ! CTA => I;
MUBLCODE(%15);OUT.BIN.B(N);MUBLUV(S);MUBLIV(I);
MUBLUV(NL);MUBLS(%"A");;
END;

PROC TL.LOAD(SN,AN);
   MUBLCODE(%2C); OUT.BIN.B(SN); OUT.BIN.B(AN); ;
END;

PROC TL.CODE.AREA(AN);
   MUBLCODE(3); OUT.BIN.B(AN); ;
END;

PROC TL.DATA.AREA(AN);
   MUBLCODE(4); OUT.BIN.B(AN); ;
END;
@BOX 1.2
//void TLSEG(int N, int S, uint32 RTA, void *CTA, int NL)
//{
//uint32 I; I = (RTA << 16) | (uint32)CTA;
//MUBLCODE(0x15);OUTBINB(N);MUBLUV(S);MUBLIV(I);
//MUBLUV(NL);MUBLS("A");;
//}
//
//void TLLOAD(int SN, int AN)
//{
//   MUBLCODE(0x2C); OUTBINB(SN); OUTBINB(AN); ;
//}
//
//void TLCODEAREA(int AN)
//{
//   MUBLCODE(3); OUTBINB(AN); ;
//}
//
//void TLDATAAREA(int AN)
//{
//   MUBLCODE(4); OUTBINB(AN); ;
//}
@END
@TITLE MSL10.3.4(1,6)
@COL 1S
@BOX 1.0
LITERAL SECTION
@BOX 1.1
PROC TL.C.LIT.16(BT,VAL);
   MUBLCODE(%10); OUT.BIN.B(BT); MUBLUV(VAL); ;
END;

PROC TL.C.LIT.32(BT,VAL);
   MUBLCODE(%35); OUT.BIN.B(BT); MUBLUV(VAL); ;
END;

PROC TL.C.LIT.64(BT,VAL);
$IN I;
VAL => I;
   MUBLCODE(%36); OUT.BIN.B(BT); MUBLU64(VAL); ;
END;

PROC TL.C.NULL(PT);
   MUBLCODE(%39);MUBLU16(PT);;
END;

PROC TL.C.LIT.S(BT,VAL);
   MUBLCODE(%3C); OUT.BIN.B(BT); MUBLS(VAL); ;
END;

PROC TL.C.LIT.128(BT,VAL);
   MUBLCODE(%37); OUT.BIN.B(BT); MUBLUV(VAL); ;
END;

PROC TL.LIT (SN, K);
   MUBLCODE(%B); MUBLS(SN); MUBLUV (K) ;
END;
@BOX 1.2
//void TLCLIT16(int BT, int16 VAL)
//{
//   MUBLCODE(0x10); OUTBINB(BT); MUBLUV(VAL); ;
//}
//
//void TLCLIT32(int BT,int32 VAL)
//{   
//   MUBLCODE(0x35); OUTBINB(BT); MUBLUV(VAL); ;
//}
//
//void TLCLIT64(int BT, t_uint64 VAL)
//{
//t_uint64 I;
//I = VAL;
//   MUBLCODE(0x36); OUTBINB(BT); MUBLU64(VAL); ;
//}
//
//void TLCNULL(int PT)
//{
//   MUBLCODE(0x39);MUBLU16(PT);;
//}

//void TLCLITS(int BT, char *VAL)
//{
//   MUBLCODE(0x3C); OUTBINB(BT); MUBLS(VAL); ;
//}

//void TLCLIT128(int BT, double VAL)
//{
//   MUBLCODE(0x37); OUTBINB(BT); MUBLUV(VAL); ;
//}
//
//void TLLIT (char *SN, int K)
//{
//   MUBLCODE(0xB); MUBLS(SN); MUBLUV (K) ;
//}
@END
@TITLE MSL10.3.3(1,6)
@COL 1S
@BOX 1.0
DATA SECTION
@BOX 1.1

PROC TL.SPACE(SI);
   MUBLCODE(%07); MUBLUV(SI); ;
END;

PROC TL.S.DECL(SN,T,D);
   MUBLCODE(%08); MUBLS(SN); MUBLIV(T); MUBLUV(D); ;
END;

PROC TL.V.DECL(SN,SA,RS,WS,T,D);
   MUBLCODE(%09);MUBLS(SN); MUBLUV(SA); MUBLU16(RS);
MUBLU16(WS); MUBLUV(T); MUBLIV(D); ;
END;

PROC TL.SELECT.VAR;
    MUBLCODE(%3B);;
END;

PROC TL.SELECT.FIELD(N,F,A);
      MUBLCODE(%28);MUBLUV(N);MUBLUV(F);MUBLUV(A);
END;

PROC TL.MAKE(S,T,D);
   MUBLCODE(%0A); MUBLU16(S); MUBLU16(T); MUBLIV(D);
END;
PROC TL.ASS(VL,AN);
     MUBLCODE(%26);MUBLUV(VL); MUBLIV(AN);;
END;

PROC TL.ASS.VALUE(N,R);
    MUBLCODE(%F);MUBLUV(N);MUBLUV(R);;
END;

PROC TL.ASS.END;
    MUBLCODE(%D);;
END;
@BOX 1.2

void TLSPACE(int SI)
{
   MUBLCODE(0x07); MUBLUV(SI); ;
}

//void TLSDECL(char *SN, int T,int D)
//{
//   MUBLCODE(0x08); MUBLS(SN); MUBLIV(T); MUBLUV(D); ;
//}

//void TLVDECL(char *SN, uint32 SA, int RS, int WS, int T, int D)
//{
//   MUBLCODE(0x09);MUBLS(SN); MUBLUV(SA); MUBLU16(RS);
//MUBLU16(WS); MUBLUV(T); MUBLIV(D); ;
//}

void TLSELECTVAR(void)
{
    MUBLCODE(0x3B);;
}

void TLSELECTFIELD(int N, int F, int A)
{
      MUBLCODE(0x28);MUBLUV(N);MUBLUV(F);MUBLUV(A);
}

void TLMAKE(int S, int T, int D)
{
   MUBLCODE((uint16)0x0A); MUBLU16((uint16)S); MUBLU16((uint16)T); MUBLIV((uint16)D);
}
//void TLASS(int VL, int AN)
//{
//     MUBLCODE(0x26);MUBLUV(VL); MUBLIV(AN);;
//}
//
//void TLASSVALUE(int N, int R)
//{
//    MUBLCODE(0xF);MUBLUV(N);MUBLUV(R);;
//}
//
//void TLASSEND(void)
//{
//    MUBLCODE(0xD);;
//}
@END
@TITLE MSL10.3.5(1,6)
@COL 1S
@BOX 1.0
PROCEDURE SECTION
@BOX 1.1
PROC TL.PROC.SPEC(NAM, NAT);
   MUBLCODE(%11); MUBLS(NAM); MUBLUV(NAT); ;
END;

PROC TL.PROC.PARAM(T, D);
   MUBLCODE(%12); MUBLU16(T); MUBLIV(D) ;
END;

PROC TL.PROC.RESULT(R,D);
   MUBLCODE(%27); MUBLUV(R);
END;

PROC TL.PROC(P);
   MUBLCODE(%13); MUBLUV(P); ;
END;

PROC TL.PROC.KIND(K);
   MUBLCODE(%29); OUT.BIN.B(K); ;
END;

PROC TL.END.PROC;
   MUBLCODE(%14); ;
END;

PROC TL.BLOCK;
   MUBLCODE(%19); ;
END;

PROC TL.END.BLOCK;
   MUBLCODE(%1A); ;
END;
PROC TL.ENTRY(N);
      MUBLCODE(%31);MUBLU16(N);;
END;

@BOX 1.2
//void TLPROCSPEC(char *NAM, int NAT)
//{
//   MUBLCODE(0x11); MUBLS(NAM); MUBLUV(NAT); ;
//}

//void TLPROCPARAM(int T, int D)
//{
//   MUBLCODE(0x12); MUBLU16(T); MUBLIV(D) ;
//}
//
//void TLPROCRESULT(int R, int D)
//{
//   MUBLCODE(0x27); MUBLUV(R);
//}
//
//void TLPROC(int P)
//{
//   MUBLCODE(0x13); MUBLUV(P); ;
//}
//
//void TLPROCKIND(int K)
//{
//   MUBLCODE(0x29); OUTBINB(K); ;
//}
//
//void TLENDPROC(void)
//{
//   MUBLCODE(0x14); ;
//}
//
//void TLBLOCK(void)
//{
//   MUBLCODE(0x19); ;
//}
//
//void TLENDBLOCK(void)
//{
//   MUBLCODE(0x1A); ;
//}
//void TLENTRY(int N)
//{
//      MUBLCODE(0x31);MUBLU16(N);;
//}
@END
@TITLE MSL10.3.6(1,6)
@COL 1S
@BOX 1.0
LABEL SECTION
@BOX 1.1
PROC TL.LABEL.SPEC(N,U);
   MUBLCODE(%1B); MUBLS(N); OUT.BIN.B(U); ;
END;

PROC TL.LABEL(L);
   MUBLCODE(%1C); MUBLU16(L); ;
END;
@BOX 1.2
//void TLLABELSPEC(char *N, int U)
//{
//   MUBLCODE(0x1B); MUBLS(N); OUTBINB(U); ;
//}

//void TLLABEL(int L)
//{
//   MUBLCODE(0x1C); MUBLU16(L); ;
//}
@END
@TITLE MSL10.3.7(1,6)
@COL 1S
@BOX 1.0
CODE PLANTING SECTION
@BOX 1.1
PROC TL.PL(F,N);
   IF N = 0 THEN
   MUBLCODE(%80!F)
   ELSE
   MUBLCODE(F->>1 ! %40);MUBLU16(F & 1 <<- 15 ! N)
FI
END
PROC TL.D.TYPE(T,D);
     MUBLCODE(%8); MUBLU16(T); MUBLIV(D);
END;
PROC TL.INSERT(BIN);
      MUBLCODE(%2B);MUBLUV(BIN);;
END;

PROC TL.CHECK(S);
   MUBLCODE(%34); MUBLU16(S); ;
END;

PROC TL.REG(RU);
   MUBLCODE(%1E); OUT.BIN.B(RU); ;
END;
@BOX 1.2
//void TLPL(int F, int N)
//{
//   if (N==0)
//   {
//      MUBLCODE(0x80 | F);
//   }
//   else
//   {
//      MUBLCODE((F>>1) | 0x40);MUBLU16( ((F & 1) << 15) | N);
//   }
//}

void TLDTYPE(int T, int D)
{
     MUBLCODE((uint16)0x8); MUBLU16((uint16)T); MUBLIV((uint16)D);
}
//void TLINSERT(int BIN)
//{
//      MUBLCODE(0x2B);MUBLUV(BIN);;
//}

void TLCHECK(int S)
{
   MUBLCODE((uint16)0x34); MUBLU16((uint16)S); ;
}

void TLREG(int RU)
{
   MUBLCODE(0x1E); OUTBINB(RU); ;
}
@END
@TITLE MSL10.3.8(1,6)
@COL 1S
@BOX 1.0
DIAGNOSTICS SECTION
@BOX 1.1

PROC TL.LINE(LN);
IF LN = 0 THEN
  IPOS()=>LN
FI
   MUBLCODE(%21); MUBLUV(LN); ;
END;
PROC TL.PRINT(M);
   MUBLCODE(%18); MUBLUV(M);;
END;
@BOX 1.2

//void TLLINE(LN)
//{
////  if (LN == 0)
////  {
////    LN = IPOS();
////  }
////   MUBLCODE(0x21); MUBLUV(LN); ;
//}
//void TLPRINT(int M)
//{
//   MUBLCODE(0x18); MUBLUV(M);;
//}
@END
@TITLE MSL10.3.9(1,6)
@COL 1S
@BOX 1.0
INITIALISATION SECTION
@BOX 1.1
PROC TL(M,FN,DZ);
   MUBLCODE(%22); OUT.BIN.B(M); MUBLS(FN); MUBLUV(DZ) ;
END;

PROC TL.END;
   MUBLCODE(%23); ;
END;

PROC TL.MODULE;
   MUBLCODE(%24); ;
END;

PROC TL.END.MODULE(ST);
   MUBLCODE(%25); MUBLUV(ST);
END;
PROC TL.MODE(I,J);
      MUBLCODE(%30); MUBLU16(I);MUBLUV(J);;
END;
@BOX 1.2
//void TL(int M, char *FN, int DZ)
//{
//   MUBLCODE(0x22); OUTBINB(M); MUBLS(FN); MUBLUV(DZ) ;
//}
//
//void TLEND(void)
//{
//   MUBLCODE(0x23); ;
//}
//
//void TLMODULE(void)
//{
//   MUBLCODE(0x24); ;
//}
//
//void TLENDMODULE(int ST)
//{
//   MUBLCODE(0x25); MUBLUV(ST);
//}
void TLMODE(int I, int J)
{
      MUBLCODE((uint16)0x30); MUBLU16((uint16)I);MUBLUV((uint16)J);;
}
@END